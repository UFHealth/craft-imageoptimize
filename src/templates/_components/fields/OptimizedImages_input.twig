{#
/**
 * Image Optimize plugin for Craft CMS 3.x
 *
 * OptimizedImages Field Input
 *
 * @author    nystudio107
 * @copyright Copyright (c) 2017 nystudio107
 * @link      https://nystudio107.com
 * @package   ImageOptimize
 * @since     1.2.0
 */
#}

{% do view.registerAssetBundle("nystudio107\\imageoptimize\\assetbundles\\optimizedimagesfield\\OptimizedImagesFieldAsset") %}
{% set baseAssetsUrl = view.getAssetManager().getPublishedUrl('@nystudio107/imageoptimize/assetbundles/optimizedimagesfield/dist', true) %}

{% import "_includes/forms" as forms %}

{% if value.optimizedImageUrls is defined and value.optimizedImageUrls |length %}
<div class="field">
    <div class="heading">
        <label>Optimized Image Variants:</label>
        <p style="fill: #AAA; color: #AAA;">
            {% if value.focalPoint |length %}
                <span class="success" title="{{ 'Focal Point set'|t('image-optimize') }}" data-icon="check"></span>
                {{ source('image-optimize/_components/fields/focal-point.svg') }}
                <span>{{ 'Focal Point set' |t('image-optimize') }}</span>
            {% else %}
                <span class="warning" title="{{ 'Focal Point not set'|t('image-optimize') }}" data-icon="alert"></span>
                {{ source('image-optimize/_components/fields/focal-point.svg') }}
                <span>{{ 'Focal Point not set' |t('image-optimize') }}</span>
            {% endif %}
        </p>
    </div>
    {% set retinaSizes = [] %}
    {% set maxWidth = 0 %}
    {% for variant in variants %}
        {% set retinaSizes = ['1'] %}
        {% for retinaSize in retinaSizes %}
            {% set retinaWidth = variant.width * retinaSize %}
            {% if retinaWidth > maxWidth %}
                {% set maxWidth = retinaWidth %}
            {% endif %}
        {% endfor  %}
    {% endfor  %}

    {% set retinaSizes = [] %}
    {% set fileSuffixes = ['', '.webp'] %}
    {% for variant in variants %}
        {% set retinaSizes = ['1'] %}
        {% if variant.retinaSizes is defined and variant.retinaSizes|length %}
            {% set retinaSizes = variant.retinaSizes %}
        {% endif %}
        {% for retinaSize in retinaSizes %}
            {% set realWidth = variant.width %}
            {% set retinaWidth = variant.width * retinaSize %}
            <div style="padding-bottom: 10px; width: 440px; text-align: center;">
                {% for fileSuffix in fileSuffixes %}
                    <div style="display: inline-block; padding-right: 10px; vertical-align: top;">
                        {% set thisUrl = "" %}
                        {% set errorMessage = ' variant does not exist' %}
                        {% if value.optimizedImageUrls |length and value.optimizedImageUrls[retinaWidth] is defined and value.optimizedImageUrls[retinaWidth] |length %}
                            {% set thisUrl = value.optimizedImageUrls[retinaWidth] ~ fileSuffix %}
                        {% else %}
                            {% set errorMessage = " format cannot be manipulated" %}
                        {% endif %}
                        {% set thisFileSize = value.getRemoteFileSize(thisUrl) %}
                        {% set aspectRatio = variant.aspectRatioX / variant.aspectRatioY %}
                        {% set useAspectRatio = variant.useAspectRatio ?? true %}
                        {% if useAspectRatio != true %}
                            {% set aspectRatio = value.originalImageWidth / value.originalImageHeight %}
                        {% endif %}
                        {% set thisWidth = (realWidth * 200) / maxWidth %}
                        {% set thisHeight = thisWidth / aspectRatio %}
                        {% set thisFontSize = (realWidth * 30) / maxWidth %}
                        {% if thisFontSize < 12 %}
                            {% set thisFontSize = 12 %}
                        {% endif %}
                        {% set thisStrokeColor = '#AAA' %}
                        {% set thisFillColor = '#DDD' %}

                        {% set markerWidth = 4 %}
                        {% set markerHeight = 4 %}
                        {% set lineY = 12 %}
                        <svg width="{{ thisWidth }}" height="20px">
                            <marker id="{{ name }}startarrow" markerWidth="{{ markerWidth }}" markerHeight="{{ markerHeight }}"
                                    refX="{{ markerWidth }}" refY="{{ markerHeight / 2 }}" orient="auto">
                                <polygon points="{{ markerWidth }} 0, {{ markerWidth }} {{ markerHeight }}, 0 {{ markerHeight / 2 }}" fill="{{ thisStrokeColor }}" />
                            </marker>
                            <marker id="{{ name }}endarrow" markerWidth="{{ markerWidth }}" markerHeight="{{ markerHeight }}"
                                    refX="0" refY="{{ markerHeight / 2 }}" orient="auto" markerUnits="strokeWidth">
                                <polygon points="0 0, {{ markerWidth }} {{ markerHeight / 2 }}, 0 {{ markerHeight }}" fill="{{ thisStrokeColor }}" />
                            </marker>
                            <line x1="{{ markerWidth * 2 }}" y1="{{ lineY }}" x2="{{ thisWidth - (markerWidth * 2) }}" y2="{{ lineY }}" stroke="{{ thisStrokeColor }}" stroke-width="2" marker-end="url(#{{ nameSpaceId }}endarrow)" marker-start="url(#{{ nameSpaceId }}startarrow)" />
                            <text x="{{ thisWidth / 2 }}" y="{{ lineY + 4 }}" text-anchor="middle" fill="white" stroke="white" stroke-width="5">{{ retinaWidth }}w</text>
                            <text x="{{ thisWidth / 2 }}" y="{{ lineY + 4 }}" text-anchor="middle" fill="{{ thisStrokeColor }}">{{ retinaWidth }}w</text>
                        </svg>

                        {%  set aspectRatioText = variant.aspectRatioX ~ ':' ~ variant.aspectRatioY %}
                        {% if useAspectRatio != true %}
                            {% set aspectRatioText = 'N/A' %}
                        {% endif %}
                        {% if value.optimizedImageUrls |length and thisFileSize != -1 and thisUrl |length %}
                            <div style="width: 200px; vertical-align: top;">
                                <a href="{{ thisUrl }}" target="_blank">
                                    <div style="position: relative;">
                                        <img style="vertical-align: middle; box-shadow: 0px 3px 15px rgba(0,0,0,0.2);" src="{{ thisUrl }}" height="{{ thisHeight }}" width="{{ thisWidth }}" />
                                        {% if (retinaSizes |length) > 1 %}
                                            <h4 class="io-retina-size-badge">
                                                {{ retinaSize }}x
                                            </h4>
                                        {% endif %}
                                    </div>
                                </a>
                            </div>
                            <div style="text-align: center; padding-top: 10px;">
                                <span style="text-transform: uppercase; color: {{ thisStrokeColor }}">
                                    {{ aspectRatioText }}
                                    &middot;
                                    {{ thisUrl |split('.') |last }}
                                    &middot;
                                    {{ thisFileSize }}
                                </span>
                                {% if value.originalImageWidth < retinaWidth or value.originalImageHeight < (retinaWidth / aspectRatio) %}
                                    <br />
                                    <span class="warning" title="{{ 'This image is upscaled'|t('image-optimize') }}" data-icon="alert"></span>
                                    <span style="color: {{ thisStrokeColor }};">This image is upscaled</span>
                                {% endif %}
                            </div>
                        {% else %}
                            <div style="width: 200px; vertical-align: top;">
                                <svg style="margin: 0 auto; display: block;" height="{{ thisHeight }}" width="{{ thisWidth }}" preserveAspectRatio="xMidYMid meet">
                                    <rect fill="{{ thisFillColor }}" x="0" y="0" width="{{ thisWidth }}" height="{{ thisHeight }}" stroke="{{ thisStrokeColor }}" stroke-width="4">
                                    </rect>
                                    <text x="{{ thisWidth / 2 }}" y="{{ thisHeight / 2 }}" fill="{{ thisStrokeColor }}" text-anchor="middle" alignment-baseline="central" font-size="{{ thisFontSize }}">
                                        {{ aspectRatioText }}
                                    </text>
                                </svg>
                            </div>
                            <div style="text-align: center; padding-top: 10px;">
                                <span style="color: {{ thisStrokeColor }}">
                                    {% set thisFormat = thisUrl |split('.') |last %}
                                    <span class="warning" title="{{ thisFormat ~ (errorMessage |t('image-optimize')) }}" data-icon="alert"></span>
                                    <span style="text-transform: uppercase;">{{ thisFormat }}</span> {{ errorMessage |t('image-optimize') }}
                                </span>
                            </div>
                        {% endif %}
                    </div>
                {% endfor %}
            </div>
        {% endfor %}
    {% endfor  %}
</div>
{% else %}
<div class="field">
    <div class="heading">
        <label>Optimized Image Variants:</label>
        <p>
            <span class="warning" title="{{ 'Focal Point not set'|t('image-optimize') }}" data-icon="alert"></span>
            <span>{{ 'This is not an image that can be manipulated' |t('image-optimize') }}</span>
        </p>
    </div>
</div>
{% endif %}